mtry = 4, #the optimal
nodesize = 1, #1 for classficiation (die or live)
importance = TRUE)
summary(rf_model)
rf_model
# the optimual vaule for the mtry is 4
rf_model <- randomForest(Survived ~ ., data = TTD,
ntree = 10000,  #how many
mtry = 3, #the optimal
nodesize = 1, #1 for classification (die or live)
importance = TRUE)
print(rf_model)
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library( lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
library(randomForest)
library(caret)
#model 2: the randomForest
############
############data import and cleaning
#clean the enviroment and import the date
rm( list = ls())
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
#####################
#Step one: Clean the data
#####################
Titanic_train_raw <- read_csv("Titanic data/train.csv",
col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip()))
#At here I skiped their name which does not impact the model training,
#their ticket number with is not important and their cabin which has limit number
################ The age.
#I notice there are some age part are empty so i decided to use mean of age to fill the gap.
#but before that I just need to check the distribution of age between the survived and died
#calcuate the average of all the age
######### fill the age
#calcuate the average age
The_average_age <- mean(Titanic_train_raw$Age, na.rm = TRUE)
#fill the NA age
Titanic_train_raw$Age[is.na(Titanic_train_raw$Age)] <- The_average_age
#outupt it into the aerage
Titanic_train_without_age_gap <- Titanic_train_raw
#remove towo empty line of embraketd
Titanic_train_cleaned <- na.omit(Titanic_train_without_age_gap)
#we got the final data
TTD <- dummy_cols(Titanic_train_cleaned, select_columns = "Sex", remove_selected_columns = TRUE)
#transfer the survived into factor
TTD$Survived <- as.factor(TTD$Survived)
#using the k ford cross validation to determine the number mtry win the
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values from 1 to 10
ntreeGrid <- expand.grid(mtry=1:10)
# Train the model across the ntree range
# set seed so it can be repate...
# its been jump between 3 to 4 a lot...
set.seed(123455632)
#The time for the test!!!!!
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
#show the output!
print(model_test)
# the optimual vaule for the mtry is 4
rf_model <- randomForest(Survived ~ ., data = TTD,
ntree = 10000,  #how many
mtry = 3, #the optimal
nodesize = 1, #1 for classification (die or live)
importance = TRUE)
print(rf_model)
summary()
# the optimual vaule for the mtry is 4
rf_model <- randomForest(Survived ~ ., data = TTD,
ntree = 10000,  #how many
mtry = 4, #the optimal
nodesize = 1, #1 for classification (die or live)
importance = TRUE)
print(rf_model)
TTD
The_average_age <- mean(Titanic_train_raw$Age, na.rm = TRUE)
#the average age between who subdivided and who does not
mean_age_by_survival <- aggregate(Age ~ Survived, data = Titanic_train_raw, FUN = function(x) mean(x, na.rm = TRUE))
print(mean_age_by_survival )
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw )))
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw )))
rm( list = ls())
# loding the package and some basic setting.
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library(lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw )))
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw$Age )))
sum(is.na(Titanic_train_raw$Age))
sum(is.na(Titanic_train_raw$Age))
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw$Age )))
print(colSums(is.na(Titanic_train_raw$Age )))
#check the number of NA in the data set
print(colSums(is.na(Titanic_train_raw$Age )))
#check the number of NA in the data set
sum(is.na(Titanic_train_raw ))
print(colSums(is.na(Titanic_train_raw)))
print(colSums(is.na(Titanic_train_raw)))
rm( list = ls())
# loding the package and some basic setting.
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library(lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
print(colSums(is.na(Titanic_train_raw)))
rm( list = ls())
# loding the package and some basic setting.
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library(lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
rm( list = ls())
# loding the package and some basic setting.
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library(lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
rm( list = ls())
# loding the package and some basic setting.
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library(lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
#crate a new matrix
x_1 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Sex_female
) %>%
data.matrix()
#crate a new matrix
x_1 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Sex_female
) %>%
data.matrix()
#crate a new matrix
x_1 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Sex_female
) %>%
data.matrix()
x_2 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Embarked, Sex_female
) %>%
data.matrix()
x_1 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Sex_female) %>%
data.matrix()
TTD
TTD
TTD
TTD
#replace the missing value with the average
Titanic_train_raw$Age[is.na(Titanic_train_raw$Age)] <- The_average_age
#the average age of the entire data set
The_average_age <- mean(Titanic_train_raw$Age, na.rm = TRUE)
#the average age between who subdivided and who does not
mean_age_by_survival <- aggregate(Age ~ Survived, data = Titanic_train_raw, FUN = function(x) mean(x, na.rm = TRUE))
print(colSums(is.na(Titanic_train_raw)))
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
#loding the data
Titanic_train_raw <- read_csv("Titanic data/train.csv",
col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip()))
print(colSums(is.na(Titanic_train_raw)))
#the average age between who subdivided and who does not
mean_age_by_survival <- aggregate(Age ~ Survived, data = Titanic_train_raw, FUN = function(x) mean(x, na.rm = TRUE))
print(mean_age_by_survival )
#the average age of the entire data set
The_average_age <- mean(Titanic_train_raw$Age, na.rm = TRUE)
print(The_average_age)
#replace the missing value with the average
Titanic_train_raw$Age[is.na(Titanic_train_raw$Age)] <- The_average_age
Titanic_train_without_age_gap <- Titanic_train_raw
#delete the 2 line in the embarked
Titanic_train_cleaned <- na.omit(Titanic_train_without_age_gap)
#transer it into the the tranning data set with dummy vaiaralbe.
TTD<- dummy_cols(Titanic_train_cleaned, select_columns = "Sex", remove_selected_columns = TRUE)
par(mfrow = c(3, 2))
#the grpahy per class
barplot(table(TTD$Survived, TTD$Pclass), beside = TRUE,
main = "Survived by Pclass", xlab = "Pclass", ylab = "Count")
legend("top", legend = c("0: Died", "1: Survived"), fill = c("black", "white"))
# Age Boxplot
boxplot(Age ~ Survived, data = TTD,
col = c("orange", "gray"),
main = "Survived by Age",
xlab = "Survived", ylab = "Age")
legend("top", legend = c("0: Died", "1: Survived"), fill = c("orange", "gray"))
# SibSp
survival_table_sibsp <- table(TTD$Survived, TTD$SibSp)
barplot(survival_table_sibsp, beside = TRUE, col = c("black", "gray"),
main = "Survived by SibSp", xlab = "SibSp", ylab = "Count")
legend("topright", legend = c("0: Died", "1: Survived"), fill = c("black", "gray"))
# The parch
stripchart(Parch ~ Survived, data = TTD, vertical = TRUE, method = "jitter",
pch = 20, col = c("black", "gray"),
main = " Survived by parch",
xlab = "Survived", ylab = "Parch")
legend("top", legend = c("0: Died", "1: Survived"), fill = c("black", "gray"))
# The fare(The price of ticket)
boxplot(Fare ~ Survived, data = TTD,
col = c("orange", "gray"),
main = "Survived by Fare",
xlab = "Survived", ylab = "Fare")
legend("top", legend = c("0: Died", "1: Survived"), fill = c("black", "gray"))
#The sex
female_table <- table(TTD$Sex_female, TTD$Survived)
barplot(female_table, beside = TRUE, col = c("black", "gray"),
main = "Survived by Sex", xlab = "Sex", ylab = "Count",
legend = F)
legend("center", legend = c("MALE", "Female"), fill = c("black", "gray"))
#create a new matrix
x <- TTD %>%
dplyr::select(
Pclass, Age, SibSp, Parch, Fare, Embarked, Sex_female
) %>%
data.matrix()
#take out the survived data.
live <- TTD$Survived
#The data frame time!
data2 <- data.frame(x, live)
#using regression to search all the possible output
regfit_all <- regsubsets(live ~ ., data = data2, nvmax = 10)
reg_summary <- summary(regfit_all)
# ploting the result.
plot(regfit_all, scale = "bic")
par(mfrow=c(1,3))
# Plot RSS
plot(reg_summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
# Plot BIC with highlighted minimum point
plot(reg_summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
m.bic <- which.min(reg_summary$bic) # Find the index of minimum BIC
points(m.bic, reg_summary$bic[m.bic], col = "red", cex = 2, pch = 20) # Highlight the min point
# Plot Cp with highlighted minimum point
plot(reg_summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
m.cp <- which.min(reg_summary$cp) # Find the index of minimum Cp
points(m.cp, reg_summary$cp[m.cp], col = "red", cex = 2, pch = 20) # Highlight the min point
#crate a new matrix
x_1 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Sex_female) %>%
data.matrix()
x_2 <- TTD%>%
dplyr::select(
Pclass, Age, SibSp, Embarked, Sex_female) %>%
data.matrix()
#take out the survive
live <- TTD$Survived
#put two things together as data frame
data_V1 <- data.frame(x_1, live)
data_V2 <- data.frame(x_2, live)
#The BP test
data_test_1_lm <- lm(live ~ . , data = data_V1)
data_test_2_lm <- lm(live ~ ., data = data_V2)
date_test_1_gm <- glm(live ~ Pclass + Sex_female + Age + SibSp, family = binomial, data = data_V1)
date_test_2_gm <- glm(live ~ Pclass + Sex_female + Age + SibSp + Embarked, family = binomial, data = data_V2)
bptest(data_test_1_lm)
bptest(data_test_2_lm)
#cleaning the environment.
rm( list = ls())
#loading the package
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library( lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
library(randomForest)
library(caret)
####################
#The R package her just copy and past from my undergraduate assignment
#As where all my command I know come from
##################
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--/The-housing_price")
setwd("~/Documents/GitHub/The-data-analysis-job--/The Housing price")
library(readr)
train <- read_csv("~/Documents/GitHub/The-data-analysis-job--/The data/house-prices-advanced-regression-techniques/train.csv")
View(train)
print(colSums(is.na(housing_data_raw)))
housing_data_raw<- read_csv("~/Documents/GitHub/The-data-analysis-job--/The data/house-prices-advanced-regression-techniques/train.csv")
housing_data_raw
print(colSums(is.na(housing_data_raw)))
print(colSums(is.na(housing_data_raw)))
setwd("~/Documents/GitHub/The-data-analysis-job--/The Housing price")
print(colSums(is.na(Thousing_price_raw)))
housing_price_raw<- read_csv("~/Documents/GitHub/The-data-analysis-job--/The data/house-prices-advanced-regression-techniques/train.csv")
#At here I skiped their name which does not impact the model training,
#their ticket number with is not important and their cabin which has limit number
print(colSums(is.na(housing_price_raw)))
housing_price_raw
housing_price_raw <- housing_price_raw%>%
select(-PoolQC, -MiscFeature, -Alley)
housing_price_raw <- housing_price_raw %>% select(-PoolQC, -MiscFeature, -Alley)
housing_price_raw
library(tidyverse)
library(dplyr)
library(fpp2)
library(glmnet)
library(tidyr)
library(lmtest)
library(boot)
library(forecast)
library(readr)
library(ggfortify)
library(tseries)
library(urca)
library(readxl)
library( lubridate)
library(tsbox)
library(RColorBrewer)
library(wesanderson)
library(writexl)
library(gridExtra)
library(vars)
library(leaps)
library(broom)
library(fastDummies)
library(car)
library(randomForest)
library(caret)
housing_price_raw <- housing_price_raw %>% select(-PoolQC, -MiscFeature, -Alley)
housing_price_raw <- dplyr::select(housing_price_raw, -PoolQC, -MiscFeature, -Alley)
housing_price_raw
housing_price_raw <- housing_price_raw %>% select(-PoolQC, -MiscFeature, -Alley)
x <- housing_price_raw%>%
dplyr::select(
-SalePrice
) %>%
data.matrix()
View(x)
x <- housing_price_raw%>%
dplyr::select(
-SalePrice
) %>%
data.matrix()
#take out the survive
y <- housing_price_raw$SalePrice
#put two things together as data frame
data2 <- data.frame(x, y)
# using the 5 fold cross validation to find the optimal lambda
ridge.cv <- cv.glmnet(x, y, alpha = 0, nfolds = 5)
y <- housing_price_raw$SalePrice
data2 <- data.frame(x, y)
ridge.cv <- cv.glmnet(x, y, alpha = 0, nfolds = 5)
x <- housing_price_raw%>%
dplyr::select(
-SalePrice
) %>%
data.matrix()
x <- x[complete.cases(x), ]
#take out the survive
y <- housing_price_raw$SalePrice
#put two things together as data frame
data2 <- data.frame(x, y)
