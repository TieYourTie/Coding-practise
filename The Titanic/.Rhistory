data_selected <- data %>%
select(
V202073, V201237, V202419, V202468x, V201549x, V201600, V201510, V201601, V202355, V201435, V201459, V201200,
V202414, V202412, V202410, V202417, V202488, V202489, V201503, V201502, V201233, V201507x
) %>%
rename(
Vote = V202073,
Trust = V201237,
Culture = V202419,
Income = V202468x,
Race = V201549x,
Gender = V201600,
Educate = V201510,
Orientation = V201601,
Rural = V202355,
Religion = V201435,
Evangeli = V201459,
Politics = V201200,
Pop = V202414,
Pop2 = V202412,
Pop3 = V202410,
Pop4 = V202417,
Treat1 = V202488,
Treat2 = V202489,
EconomicTheory = V201503,
Economic = V201502,
TrustG = V201233,
Age1 = V201507x
)
# Step 2: Remove invalid responses
data_selected <- data_selected %>%
filter(
!Vote %in% c(-9, -8, -7, -6, -1, 3, 4, 5, 7, 8, 11, 12),
EconomicTheory != -9 & EconomicTheory != -8,
Trust != -9 & Trust != -8,
!Culture %in% c(-9, -8, -7, -6, -5)
)
# Step 3: Create new variables
data_selected <- data_selected %>%
mutate(
Trumpvoter = ifelse(Vote == 2, 1, ifelse(Vote == 1, 0, NA)),
White = ifelse(Race == 1, 1, 0),
Gender = ifelse(Gender == 1, 1, ifelse(Gender == 2, 0, NA)),
Education = case_when(
Educate == 8 ~ 1,
Educate == 7 ~ 2,
Educate == 6 ~ 3,
Educate %in% c(4, 5) ~ 4,
Educate == 3 ~ 5,
Educate == 2 ~ 6,
Educate == 1 ~ 7
),
LGBT = ifelse(Orientation %in% c(2, 3), 2, ifelse(Orientation == 1, 1, NA)),
Rural_Urban = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 1,
Rural == 2 ~ 2,
Rural == 1 ~ 3
),
Rural_Urban2 = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 2,
Rural == 2 ~ 3,
Rural == 1 ~ 4
),
Religion = case_when(
Religion == 1 ~ 4,
Religion == 2 ~ 3,
Religion %in% c(9, 10) ~ 2,
Religion %in% 3:8 ~ 1
),
Evangelical = ifelse(Evangeli %in% c(2, 3), 1, ifelse(Evangeli == 4, 0, NA)),
Conservative = as.integer(Politics),
Populism = 6 - Pop,
Populism2 = 6 - Pop2,
Populism3 = 6 - Pop3,
Populism4 = 6 - Pop4,
TreatmentBlack = case_when(
Treat1 == 1 ~ 0,
Treat1 == 2 ~ 1,
Treat1 == 3 ~ 2
),
TreatmentBlackCheck = ifelse(Treat1 == 3, 1, 0),
TreatmentWhite = case_when(
Treat1 == 3 ~ 1,
Treat1 == 2 ~ 2,
Treat1 == 1 ~ 3
),
Treatment2 = case_when(
Treat2 == 1 ~ 1,
Treat2 == 2 ~ 2,
Treat2 == 3 ~ 3
),
black_white = ifelse(Race %in% c(1, 2), Race, NA),
Age = case_when(
Age1 %in% 18:24 ~ 1,
Age1 %in% 25:34 ~ 2,
Age1 %in% 35:44 ~ 3,
Age1 %in% 45:54 ~ 4,
Age1 %in% 55:64 ~ 5,
Age1 >= 60 ~ 6
),
EconomicInsecurity = 6 - EconomicTheory,
SocialTrust = 6 - Trust,
GovTrust = 6 - TrustG,
Cultureharm = 6 - Culture,
IncomeBracket = case_when(
Income %in% 1:5 ~ 1,
Income %in% 6:10 ~ 2,
Income %in% 11:15 ~ 3,
Income %in% 16:19 ~ 4,
Income %in% 20:21 ~ 5,
Income == 22 ~ 6
),
Trumpvote = ifelse(Vote == 2, 1, 0),
Bidenvote = ifelse(Vote == 1, 1, 0)
)
# Step 4: Filter out rows where Politics has a value of 99
cleaned_data <- data_selected %>%
filter(Politics != 99)
# Step 5: Remove columns where all values are NA
cleaned_data <- cleaned_data %>%
select(where(~ !all(is.na(.))))
# Step 6: Remove all rows with any NA values in the cleaned data
cleaned_data <- cleaned_data %>%
drop_na()
# Step 7: Create a new matrix with selected variables
x <- cleaned_data %>%
dplyr::select(
Trust, Culture, Income, Race, Gender, Educate, Orientation, Rural, Religion, Evangeli, Politics,
Pop, Pop2, Pop3, Pop4, Treat1, Treat2, EconomicTheory, Economic, TrustG, Age1
) %>%
data.matrix()
# Check if x has any rows left
if (nrow(x) == 0) {
stop("No rows left in x after removing NAs and filtering Politics != 99")
}
# Step 8: Extract the Trumpvoter data
trumpvoter <- cleaned_data$Trumpvoter
# Check if trumpvoter has any valid values
if (length(trumpvoter) == 0) {
stop("No valid Trumpvoter data available after cleaning")
}
# Step 9: Perform 5-fold cross-validation for Lasso logistic regression to find the optimal lambda
tryCatch({
lasso.cv <- cv.glmnet(x, trumpvoter, alpha = 1, nfolds = 5, family = "binomial")
}, error = function(e) {
stop("Error in cv.glmnet: ", e$message)
})
# Step 10: Extract coefficients from the Lasso logistic regression using the optimal lambda
coef_lasso <- as.vector(coef(lasso.cv, s = "lambda.min")[-1])
# Step 11: Perform logistic regression
logit_model <- glm(trumpvoter ~ ., data = data.frame(x, trumpvoter), family = "binomial")
# Step 12: Extract coefficients from the logistic regression, excluding the intercept
coef_logit <- coef(logit_model)[-1]
# Step 13: Create a data frame for comparison
variable_names <- names(coef_logit)
performance_table <- data.frame(
Variable = variable_names,
Logistic = coef_logit,
Lasso = coef_lasso
)
# Step 14: Print the output table
print(performance_table)
write.csv(performance_table, "performance_table.csv", row.names = FALSE)
write.csv(performance_table, "/Users/tie/Downloads/performance_table.csv", row.names = FALSE)
par(mfrow=c(1,3))
# Plot RSS
plot(reg_summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
# Plot BIC with highlighted minimum point
plot(reg_summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
m.bic <- which.min(reg_summary$bic) # Find the index of minimum BIC
points(m.bic, reg_summary$bic[m.bic], col = "red", cex = 2, pch = 20) # Highlight the min point
# Plot Cp with highlighted minimum point
plot(reg_summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
m.cp <- which.min(reg_summary$cp) # Find the index of minimum Cp
points(m.cp, reg_summary$cp[m.cp], col = "red", cex = 2, pch = 20) # Highlight the min point
# Create a new matrix
x <- data_selected %>%
dplyr::select(
Trust, Culture, Income, Race, Gender, Educate, Orientation, Rural, Religion, Evangeli, Politics,
Pop, Pop2, Pop3, Pop4, Treat1, Treat2, EconomicTheory, Economic, TrustG, Age1
) %>%
data.matrix()
# Extract the Trumpvoter data
trumpvoter <- data_selected$Trumpvoter
# Create the data frame
data2 <- data.frame(x, trumpvoter)
# Using regression to search all possible outputs
regfit_all <- regsubsets(trumpvoter ~ ., data = data2, nvmax = 10)
reg_summary <- summary(regfit_all)
# Plotting the result
plot(regfit_all, scale = "bic")
# Load necessary packages
library(haven)
library(dplyr)
# Set working directory
#setwd("/Users/tie/Downloads/anes_timeseries_2020_stata_20220210.dta")
# Import data
data <- read_dta("/Users/tie/Downloads/anes_timeseries_2020_stata_20220210.dta")
# Rename variables
data_selected <- data %>%
rename(
Vote = V202073,
Trust = V201237,
Culture = V202419,
Income = V202468x,
Race = V201549x,
Gender = V201600,
Educate = V201510,
Orientation = V201601,
Rural = V202355,
Religion = V201435,
Evangeli = V201459,
Politics = V201200,
Pop = V202414,
Pop2 = V202412,
Pop3 = V202410,
Pop4 = V202417,
Treat1 = V202488,
Treat2 = V202489,
EconomicTheory = V201503,
Economic = V201502,
TrustG = V201233,
Age1 = V201507x
)
# Remove invalid responses
data_selected <- data_selected %>%
filter(
!Vote %in% c(-9, -8, -7, -6, -1, 3, 4, 5, 7, 8, 11, 12),
EconomicTheory != -9 & EconomicTheory != -8,
Trust != -9 & Trust != -8,
!Culture %in% c(-9, -8, -7, -6, -5)
)
# Create new variables
data_selected <- data_selected %>%
mutate(
Trumpvoter = ifelse(Vote == 2, 1, ifelse(Vote == 1, 0, NA)),
White = ifelse(Race == 1, 1, 0),
Gender = ifelse(Gender == 1, 1, ifelse(Gender == 2, 0, NA)),
Education = case_when(
Educate == 8 ~ 1,
Educate == 7 ~ 2,
Educate == 6 ~ 3,
Educate %in% c(4, 5) ~ 4,
Educate == 3 ~ 5,
Educate == 2 ~ 6,
Educate == 1 ~ 7
),
LGBT = ifelse(Orientation %in% c(2, 3), 2, ifelse(Orientation == 1, 1, NA)),
Rural_Urban = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 1,
Rural == 2 ~ 2,
Rural == 1 ~ 3
),
Rural_Urban2 = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 2,
Rural == 2 ~ 3,
Rural == 1 ~ 4
),
Religion = case_when(
Religion == 1 ~ 4,
Religion == 2 ~ 3,
Religion %in% c(9, 10) ~ 2,
Religion %in% 3:8 ~ 1
),
Evangelical = ifelse(Evangeli %in% c(2, 3), 1, ifelse(Evangeli == 4, 0, NA)),
Conservative = as.integer(Politics),
Populism = 6 - Pop,
Populism2 = 6 - Pop2,
Populism3 = 6 - Pop3,
Populism4 = 6 - Pop4,
TreatmentBlack = case_when(
Treat1 == 1 ~ 0,
Treat1 == 2 ~ 1,
Treat1 == 3 ~ 2
),
TreatmentBlackCheck = ifelse(Treat1 == 3, 1, 0),
TreatmentWhite = case_when(
Treat1 == 3 ~ 1,
Treat1 == 2 ~ 2,
Treat1 == 1 ~ 3
),
Treatment2 = case_when(
Treat2 == 1 ~ 1,
Treat2 == 2 ~ 2,
Treat2 == 3 ~ 3
),
black_white = ifelse(Race %in% c(1, 2), Race, NA),
Age = case_when(
Age1 %in% 18:24 ~ 1,
Age1 %in% 25:34 ~ 2,
Age1 %in% 35:44 ~ 3,
Age1 %in% 45:54 ~ 4,
Age1 %in% 55:64 ~ 5,
Age1 >= 60 ~ 6
),
EconomicInsecurity = 6 - EconomicTheory,
SocialTrust = 6 - Trust,
GovTrust = 6 - TrustG,
Cultureharm = 6 - Culture,
IncomeBracket = case_when(
Income %in% 1:5 ~ 1,
Income %in% 6:10 ~ 2,
Income %in% 11:15 ~ 3,
Income %in% 16:19 ~ 4,
Income %in% 20:21 ~ 5,
Income == 22 ~ 6
),
Trumpvote = ifelse(Vote == 2, 1, 0),
Bidenvote = ifelse(Vote == 1, 1, 0)
)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(glmnet)
# Step 1: Select and rename variables
data_selected <- data %>%
select(
V202073, V201237, V202419, V202468x, V201549x, V201600, V201510, V201601, V202355, V201435, V201459, V201200,
V202414, V202412, V202410, V202417, V202488, V202489, V201503, V201502, V201233, V201507x
) %>%
rename(
Vote = V202073,
Trust = V201237,
Culture = V202419,
Income = V202468x,
Race = V201549x,
Gender = V201600,
Educate = V201510,
Orientation = V201601,
Rural = V202355,
Religion = V201435,
Evangeli = V201459,
Politics = V201200,
Pop = V202414,
Pop2 = V202412,
Pop3 = V202410,
Pop4 = V202417,
Treat1 = V202488,
Treat2 = V202489,
EconomicTheory = V201503,
Economic = V201502,
TrustG = V201233,
Age1 = V201507x
)
# Step 2: Remove invalid responses
data_selected <- data_selected %>%
filter(
!Vote %in% c(-9, -8, -7, -6, -1, 3, 4, 5, 7, 8, 11, 12),
EconomicTheory != -9 & EconomicTheory != -8,
Trust != -9 & Trust != -8,
!Culture %in% c(-9, -8, -7, -6, -5)
)
# Step 3: Create new variables
data_selected <- data_selected %>%
mutate(
Trumpvoter = ifelse(Vote == 2, 1, ifelse(Vote == 1, 0, NA)),
White = ifelse(Race == 1, 1, 0),
Gender = ifelse(Gender == 1, 1, ifelse(Gender == 2, 0, NA)),
Education = case_when(
Educate == 8 ~ 1,
Educate == 7 ~ 2,
Educate == 6 ~ 3,
Educate %in% c(4, 5) ~ 4,
Educate == 3 ~ 5,
Educate == 2 ~ 6,
Educate == 1 ~ 7
),
LGBT = ifelse(Orientation %in% c(2, 3), 2, ifelse(Orientation == 1, 1, NA)),
Rural_Urban = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 1,
Rural == 2 ~ 2,
Rural == 1 ~ 3
),
Rural_Urban2 = case_when(
Rural == 4 ~ 1,
Rural == 3 ~ 2,
Rural == 2 ~ 3,
Rural == 1 ~ 4
),
Religion = case_when(
Religion == 1 ~ 4,
Religion == 2 ~ 3,
Religion %in% c(9, 10) ~ 2,
Religion %in% 3:8 ~ 1
),
Evangelical = ifelse(Evangeli %in% c(2, 3), 1, ifelse(Evangeli == 4, 0, NA)),
Conservative = as.integer(Politics),
Populism = 6 - Pop,
Populism2 = 6 - Pop2,
Populism3 = 6 - Pop3,
Populism4 = 6 - Pop4,
TreatmentBlack = case_when(
Treat1 == 1 ~ 0,
Treat1 == 2 ~ 1,
Treat1 == 3 ~ 2
),
TreatmentBlackCheck = ifelse(Treat1 == 3, 1, 0),
TreatmentWhite = case_when(
Treat1 == 3 ~ 1,
Treat1 == 2 ~ 2,
Treat1 == 1 ~ 3
),
Treatment2 = case_when(
Treat2 == 1 ~ 1,
Treat2 == 2 ~ 2,
Treat2 == 3 ~ 3
),
black_white = ifelse(Race %in% c(1, 2), Race, NA),
Age = case_when(
Age1 %in% 18:24 ~ 1,
Age1 %in% 25:34 ~ 2,
Age1 %in% 35:44 ~ 3,
Age1 %in% 45:54 ~ 4,
Age1 %in% 55:64 ~ 5,
Age1 >= 60 ~ 6
),
EconomicInsecurity = 6 - EconomicTheory,
SocialTrust = 6 - Trust,
GovTrust = 6 - TrustG,
Cultureharm = 6 - Culture,
IncomeBracket = case_when(
Income %in% 1:5 ~ 1,
Income %in% 6:10 ~ 2,
Income %in% 11:15 ~ 3,
Income %in% 16:19 ~ 4,
Income %in% 20:21 ~ 5,
Income == 22 ~ 6
),
Trumpvote = ifelse(Vote == 2, 1, 0),
Bidenvote = ifelse(Vote == 1, 1, 0)
)
# Step 4: Filter out rows where Politics has a value of 99
cleaned_data <- data_selected %>%
filter(Politics != 99)
# Step 5: Remove columns where all values are NA
cleaned_data <- cleaned_data %>%
select(where(~ !all(is.na(.))))
# Step 6: Remove all rows with any NA values in the cleaned data
cleaned_data <- cleaned_data %>%
drop_na()
# Step 7: Create a new matrix with selected variables
x <- cleaned_data %>%
dplyr::select(
Trust, Culture, Income, Race, Gender, Educate, Orientation, Rural, Religion, Evangeli, Politics,
Pop, Pop2, Pop3, Pop4, Treat1, Treat2, EconomicTheory, Economic, TrustG, Age1
) %>%
data.matrix()
# Check if x has any rows left
if (nrow(x) == 0) {
stop("No rows left in x after removing NAs and filtering Politics != 99")
}
# Step 8: Extract the Trumpvoter data
trumpvoter <- cleaned_data$Trumpvoter
# Check if trumpvoter has any valid values
if (length(trumpvoter) == 0) {
stop("No valid Trumpvoter data available after cleaning")
}
# Step 9: Perform 5-fold cross-validation for Lasso logistic regression to find the optimal lambda
tryCatch({
lasso.cv <- cv.glmnet(x, trumpvoter, alpha = 1, nfolds = 5, family = "binomial")
}, error = function(e) {
stop("Error in cv.glmnet: ", e$message)
})
# Step 10: Extract coefficients from the Lasso logistic regression using the optimal lambda
coef_lasso <- as.vector(coef(lasso.cv, s = "lambda.min")[-1])
# Step 11: Perform logistic regression
logit_model <- glm(trumpvoter ~ ., data = data.frame(x, trumpvoter), family = "binomial")
# Step 12: Extract coefficients from the logistic regression, excluding the intercept
coef_logit <- coef(logit_model)[-1]
# Step 13: Create a data frame for comparison
variable_names <- names(coef_logit)
performance_table <- data.frame(
Variable = variable_names,
Logistic = coef_logit,
Lasso = coef_lasso
)
# Step 14: Print the output table
print(performance_table)
write.csv(performance_table, "/Users/tie/Downloads/performance_table.csv", row.names = FALSE)
# Create a new matrix
x <- data_selected %>%
dplyr::select(
Trust, Culture, Income, Race, Gender, Educate, Orientation, Rural, Religion, Evangeli, Politics,
Pop, Pop2, Pop3, Pop4, Treat1, Treat2, EconomicTheory, Economic, TrustG, Age1
) %>%
data.matrix()
# Extract the Trumpvoter data
trumpvoter <- data_selected$Trumpvoter
# Create the data frame
data2 <- data.frame(x, trumpvoter)
# Using regression to search all possible outputs
regfit_all <- regsubsets(trumpvoter ~ ., data = data2, nvmax = 10)
reg_summary <- summary(regfit_all)
# Plotting the result
plot(regfit_all, scale = "bic")
par(mfrow=c(1,3))
# Plot RSS
plot(reg_summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
# Plot BIC with highlighted minimum point
plot(reg_summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
m.bic <- which.min(reg_summary$bic) # Find the index of minimum BIC
points(m.bic, reg_summary$bic[m.bic], col = "red", cex = 2, pch = 20) # Highlight the min point
# Plot Cp with highlighted minimum point
plot(reg_summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
m.cp <- which.min(reg_summary$cp) # Find the index of minimum Cp
points(m.cp, reg_summary$cp[m.cp], col = "red", cex = 2, pch = 20) # Highlight the min point
write.xlsx(performance_table, "/Users/tie/Downloads/performance_table.csv", row.names = FALSE)
